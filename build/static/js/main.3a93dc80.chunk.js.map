{"version":3,"sources":["firebase.js","actions/user.js","reducers/user.js","reducers/index.js","redux-persist.js","components/Auth/SignUp.jsx","components/Auth/Login.jsx","routes.js","components/game/Rules.jsx","components/Profile.jsx","components/game/Lobby.jsx","components/game/Alert.jsx","components/game/InGame.jsx","components/game/FinishedGame.jsx","components/game/ClassSelect.jsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","db","geoDb","GeoFirestore","matchRef","matchId","collection","doc","finishedMatchRef","playerRef","userId","playersRef","sonardPlayersRef","taggedPlayersRef","GET_USER","GET_USER_INFO","REMOVE_USER","combineReducers","user","state","type","payload","UID","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","SignUp","username","email","password","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","props","dispatch","data","createUserWithEmailAndPassword","then","uid","set","console","log","catch","error","createAccount","this","authed","to","Box","align","pad","border","color","size","elevation","round","Form","style","margin","onSubmit","FormField","TextInput","placeholder","onChange","required","direction","justify","top","Button","primary","label","Component","connect","Login","signInWithEmailAndPassword","routes","LOGIN","SIGN_UP","PROFILE","LOBBY","GAME","CLASS_SELECT","FINISHED_GAME","HOME","Rules","textAlign","gap","Text","paddingBottom","Profile","redirect","logout","signOut","get","exists","paddingLeft","paddingRight","wins","as","Link","DropButton","dropAlign","right","dropContent","secondary","onClick","DBGetMatches","Lobby","matches","getMatches","pos","query","near","center","GeoPoint","coords","latitude","longitude","radius","onSnapshot","snapshot","forEach","players","id","querySnap","snap","push","playing","admin","createMatch","add","waiting","initialising","coordinates","position","docRef","sonar","joinMatch","handleInput","navigator","geolocation","getCurrentPosition","width","length","map","game","marginTop","Alert","componentDidMount","timer","setTimeout","clear","height","Heading","level","message","hoverIndicator","Close","thisUser","boundary","DBgetMatch","DBwatchAllPlayers","DBwatchTaggedPlayers","DBwatchPlayersJoin","DBJoinedPlayers","initTimerId","gameTimerId","InGame","zoom","userLocationFound","sonarTimer","initialisingTimer","geolocationError","tagger","imTagger","allPlayersTagged","finished","gameTimer","abilityUsage","abilityTimer","quirk","abilityInUse","snitchingOn","remaining","startTimer","duration","minutes","seconds","setInterval","parseInt","clearInterval","getSurvivors","clock","startInitialiseTimer","update","initMap","L","maxZoomLevel","maxNativeZoom","zoomControl","fitWorld","tileLayer","detectRetina","attribution","addTo","on","myPosition","latlng","lat","lng","circle","fillColor","fillOpacity","bindPopup","openPopup","setView","newLatLng","LatLng","setLatLng","adminSetBoundary","alert","locate","maxZoom","watch","enableHighAccuracy","leaveGame","handlePlayerQuit","quitGame","delete","quit","find","p","winners","filter","setDraw","setWinner","quitter","putPlayersMarkersOnMap","markers","player","geopoint","marker","intervalId","removeLayer","getMatch","gotMatch","watchPlayersJoin","removeJoinedPlayers","setBoundary","watchForTaggedPlayers","watchForPlayerSonars","deleteMatch","stopLocate","taggerHasTaggedSomeone","boundaryMoving","removeEventListener","playersJoined","showPlayBtn","alreadyOnMap","_lat","_long","initGame","Math","floor","random","tagPlayer","geoQuery","docs","aboutToTag","tagFail","setPlayersAsTagged","justTagged","iJustTagged","draw","endGame","winner","snapShot","docChanges","change","setTaggedPlayerMarker","iGotTagged","sendSonar","sentSonar","where","querySnapshot","checkForPlayersSonar","window","addEventListener","showQuitOverlay","left","zIndex","backgroundColor","opacity","background","transform","overflow","icon","Help","marginRight","padding","FinishedGame","getWinners","updateWinTotal","playerWins","direcrtion","ClassSelect","classes","description","playerQuirk","selectClass","selectedClass","abilityUse","Car","Attraction","App","Grommet","theme","grommet","path","exact","component","render","routeProps","match","params","Boolean","location","hostname","require","config","document","loading","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a93dc80.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport { GeoFirestore } from \"geofirestore\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_FB_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DB_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n}\n\nfirebase.initializeApp(config);\n\nexport const auth = firebase.auth();\nexport const db = firebase.firestore();\nexport const geoDb = new GeoFirestore(db);\n\nexport function matchRef(matchId) {\n  return geoDb.collection(\"matches\").doc(matchId);\n}\n\nexport function finishedMatchRef(matchId) {\n  return db.collection(\"finishedMatches\").doc(matchId);\n}\n\nexport function playerRef(matchId, userId) {\n  return geoDb\n    .collection(\"matches\")\n    .doc(matchId)\n    .collection(\"players\")\n    .doc(userId);\n}\n\nexport function playerRefExists(matchId, userId) { \n  let exists = false\n  geoDb\n    .collection(\"matches\")\n    .doc(matchId)\n    .collection(\"players\")\n    .doc(userId)\n    .get()\n    .then(doc => {\n      doc.exists ? exists = true : exists = false\n    })\n    .catch(e => console.log(`error checking if playersRef exists ${e}`))\n\n    return exists\n}\nexport function playersRef(matchId) {\n  return geoDb\n    .collection(\"matches\")\n    .doc(matchId)\n    .collection(\"players\");\n}\n\nexport function sonardPlayersRef(matchId) {\n  return geoDb\n    .collection(\"matches\")\n    .doc(matchId)\n    .collection(\"sonardPlayers\");\n}\n\nexport function taggedPlayersRef(matchId) {\n  return geoDb\n    .collection(\"matches\")\n    .doc(matchId)\n    .collection(\"taggedPlayers\");\n}\n\n// check if doc exists\nexport function docExists(docRef) {\n  let exists = false\n  docRef.get().then((doc) => {\n    if(doc.exists) exists = true\n  })\n  .catch(e => `error, document doesnt exist`)\n\n  return exists\n}\n","import { auth, db } from \"../firebase\";\n\nexport const GET_USER = \"GET_USER\";\nexport const GET_USER_INFO = \"GET_USER_INFO\";\nexport const REMOVE_USER = \"REMOVE_USER\";\n\nexport function getUser(userId) {\n  return dispatch => {\n    db.collection(\"users\")\n      .doc(userId)\n      .get()\n      .then(doc => {\n        if (doc.exists) {\n          dispatch({\n            type: GET_USER_INFO,\n            payload: doc.data()\n          });\n        } else {\n          console.log(\"user not found\");\n        }\n      })\n      .catch(function(error) {\n        console.log(\"Error getting user:\", error);\n      });\n  };\n}\n\nexport function createAccount(data) {\n  const { username, email, password } = data;\n\n  return dispatch =>\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then(({ user }) => {\n        if (user !== null) {\n          db.collection(\"users\")\n            .doc(user.uid)\n            .set({ username })\n            .then(function() {\n              console.log(\"user account created\");\n            })\n            .catch(function(error) {\n              console.error(\"Error creating account: \", error);\n            });\n        }\n        return user;\n      })\n      .then(user => {\n        dispatch({\n          type: GET_USER,\n          payload: user.uid\n        });\n      })\n      .catch(error => console.log(error));\n}\n\nexport function loginUser(data) {\n  return dispatch =>\n    auth\n      .signInWithEmailAndPassword(data.email, data.password)\n      .then(({ user }) => {\n        dispatch({\n          type: GET_USER,\n          payload: user.uid\n        });\n      })\n      .catch(error => console.log(error));\n}\n\nexport function logoutUser() {\n  return dispatch => {\n    auth\n      .signOut()\n      .then(() => {\n        // Sign-out successful.\n        dispatch({\n          type: REMOVE_USER\n        });\n      })\n      .catch(function(error) {\n        // An error happened.\n        console.log(error);\n      });\n  };\n}\n","import { GET_USER, GET_USER_INFO, REMOVE_USER } from '../actions/user'\n\nconst initialState = null\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case GET_USER:\n      return { UID: payload, ...state  }\n    case GET_USER_INFO:\n      return { ...state, ...payload }\n      case REMOVE_USER:\n        return initialState\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport user from './user'\n\nexport default combineReducers({\n  user,\n})","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\nimport rootReducer from './reducers/index'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nconst store = createStore(persistedReducer, composeWithDevTools(\n  applyMiddleware(thunk)\n))\n\nconst persistor = persistStore(store)\n\nexport { store, persistor }","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link, Redirect } from \"react-router-dom\"\nimport { Box, FormField, TextInput, Form, Button } from \"grommet\"\nimport { createAccount } from '../../actions/user';\n\nclass SignUp extends Component {\n\n  state = {\n    username: '',\n    email: '',\n    password: ''\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.dispatch(createAccount(this.state))\n  }\n\n  render() {\n    const { email, password, username } = this.state\n    if (this.props.authed !== null) {\n      return <Redirect to='/profile' />\n    } else {\n      return (\n        <Box\n          align=\"center\"\n          pad=\"large\"\n        >\n          <h2>\n            Welcome to sonar\n        </h2>\n          <Box\n            pad=\"medium\"\n            border={{ color: 'brand', size: 'large' }}\n            elevation=\"medium\"\n            round=\"large\"\n          >\n            <Form\n              style={{ margin: '1.5em 1.5em 0 1.5em ' }}\n              onSubmit={this.handleSubmit}\n            >\n              <FormField >\n                <TextInput\n                  placeholder=\"email\"\n                  name=\"email\"\n                  onChange={this.handleChange}\n                  value={email}\n                />\n              </FormField>\n              <FormField required={true}>\n                <TextInput\n                  placeholder=\"user name\"\n                  name=\"username\"\n                  value={username}\n                  onChange={this.handleChange}\n                />\n              </FormField>\n              <FormField >\n                <TextInput\n                  placeholder=\"password\"\n                  type=\"password\"\n                  name=\"password\"\n                  onChange={this.handleChange}\n                  value={password}\n                />\n              </FormField>\n              <Box direction=\"row\" justify=\"center\" margin={{ top: \"large\" }}>\n                <Button type=\"submit\" primary label=\"Sign up\" />\n              </Box>\n            </Form>\n            <Box direction=\"row\" justify=\"center\">\n              <p>Already have an account? <Link to=\"/login\">Login here</Link></p>\n            </Box>\n          </Box>\n        </Box>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = ({ user }) => ({\n  authed: user\n})\n\nexport default connect(mapStateToProps)(SignUp)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link, Redirect } from \"react-router-dom\"\nimport { Box, FormField, TextInput, Form, Button } from \"grommet\"\nimport { loginUser } from '../../actions/user'\n\nclass Login extends Component {\n  state = {\n    email: '',\n    password: ''\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.dispatch(loginUser(this.state))\n  }\n\n  render() {\n    const { email, password } = this.state\n    if (this.props.user !== null) {\n      return <Redirect to='/profile' />\n    } else {\n      return (\n        <Box\n          align=\"center\"\n          pad=\"large\"\n        >\n          <h2>\n            Welcome to sonar\n        </h2>\n          <Box\n            pad=\"medium\"\n            border={{ color: 'brand', size: 'large' }}\n            elevation=\"medium\"\n            round=\"large\"\n          >\n            <Form\n              style={{ margin: '1.5em 1.5em 0 1.5em ' }}\n              onSubmit={this.handleSubmit}\n            >\n              <FormField >\n                <TextInput\n                  placeholder=\"email\"\n                  name=\"email\"\n                  onChange={this.handleChange}\n                  value={email}\n                />\n              </FormField>\n              <FormField >\n                <TextInput\n                  placeholder=\"password\"\n                  type=\"password\"\n                  name=\"password\"\n                  onChange={this.handleChange}\n                  value={password}\n                />\n              </FormField>\n              <Box direction=\"row\" justify=\"center\" margin={{ top: \"large\" }}>\n                <Button type=\"submit\" primary label=\"Login\" />\n              </Box>\n            </Form>\n            <Box direction=\"row\" justify=\"center\">\n              <p>Dont have an account yet? <Link to=\"/SignUp\">Sign Up here</Link></p>\n            </Box>\n          </Box>\n        </Box>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user\n  }\n}\n\nexport default connect(mapStateToProps)(Login)\n","const routes = {\n  LOGIN: \"/login\",\n  SIGN_UP: \"/signUp\",\n  PROFILE: \"/profile\",\n  LOBBY: \"/lobby\",\n  GAME: \"/game/:matchId\",\n  CLASS_SELECT: \"/game/:matchId/class-select\",\n  FINISHED_GAME: \"/game/:matchId/finished\",\n  HOME: \"/\"\n};\n\nexport default routes;\n","import React, { Component } from \"react\";\nimport { Box, Text } from \"grommet\";\n\nexport class Rules extends Component {\n  render() {\n    return (\n      <>\n        <h1 style={{ textAlign: \"center\" }}> How to play</h1>\n        <Box\n          pad=\"large\"\n          border={{ color: \"brand\", size: \"large\" }}\n          align=\"start\"\n          round=\"large\"\n          elevation=\"medium\"\n          gap=\"small\">\n          <Text size=\"small\">Its hide and go seek tag. </Text>\n          <Text size=\"small\">Someone will be randomly chosen as the tagger </Text>\n          <Text size=\"small\">When you are tagged, you become a tagger 0.o </Text>\n          <Text size=\"small\">Last person to get tagged wins!</Text>\n        </Box>\n\n        <Box direction=\"row\" align=\"start\" gap=\"small\" justify=\"between\" style={{paddingBottom: \"1em\"}}>\n          <div >\n            <h1 style={{ textAlign: \"center\" }}>Tagger</h1>\n            <Box\n              border={{ color: \"brand\", size: \"large\" }}\n              pad=\"small\" round  >\n              <Text size=\"small\">Tag anyone within 2m of you.</Text>\n              <Text size=\"small\">Watch the map for player sonars</Text>\n            </Box>\n          </div>\n\n          <div>\n            <h1 style={{ textAlign: \"center\" }}>Player</h1>\n            <Box\n              border={{ color: \"brand\", size: \"large\" }}\n              pad=\"small\" align=\"center\" round >\n              <Text size=\"small\">\n                Send a sonar to see where the taggers are! But...\n            </Text>\n              <Text size=\"small\">..They will also see your position too</Text>\n            </Box>\n          </div>\n        </Box>\n      </>\n    );\n  }\n}\n\nexport default Rules;\n","import React, { Component } from \"react\";\nimport { Box, Button, DropButton } from \"grommet\";\nimport { connect } from \"react-redux\";\nimport { getUser, logoutUser } from \"../actions/user\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport routes from \"../routes\";\nimport Rules from \"./game/Rules\";\n\nclass Profile extends Component {\n  state = {\n    redirect: false\n  };\n\n  componentDidMount() {\n    if (this.props.user.UID) {\n      this.props.dispatch(getUser(this.props.user.UID));\n    } else {\n      this.setState({ redirect: true });\n    }\n  }\n\n  logout = () => {\n    this.props.dispatch(logoutUser());\n  };\n\n  render() {\n    if (this.props.user) {\n      return (\n        <Box\n          justify=\"center\"\n          align=\"center\"\n          style={{ paddingLeft: \"1em\", paddingRight: \"1em\" }}\n        >\n          <h2> {`${this.props.user.username}`} </h2>\n          {this.props.user.wins && <p>games won: {this.props.user.wins}</p>}\n          {!this.props.user.wins && <p>go win some games!</p>}\n          <Button as={Link} to=\"/lobby\" primary label=\"play\" />\n\n          <Box\n            justify=\"center\"\n            align=\"center\"\n            direction=\"row\"\n            style={{ paddingLeft: \"1em\", paddingRight: \"1em\" }}\n          >\n            <DropButton\n              style={{ margin: \"1em\" }}\n              label=\"Rules\"\n              dropAlign={{ top: 'top', right: 'right' }}\n              dropContent={\n                <Rules />\n              }\n            />\n\n            <Button\n              secondary\n              onClick={this.logout}\n              label=\"logout\"\n            />\n          </Box>\n        </Box>\n      );\n    } else {\n      return <Redirect to={routes.HOME} />;\n    }\n  }\n}\nconst mapStateToProps = ({ user }) => ({\n  user\n});\n\nexport default connect(mapStateToProps)(Profile);\n","import * as firebase from \"firebase/app\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Box, Form, FormField, Button, DropButton } from \"grommet\";\nimport { Redirect } from \"react-router-dom\";\nimport { geoDb } from \"../../firebase\";\nimport Rules from \"./Rules\";\n\nlet DBGetMatches = null;\n\nclass Lobby extends Component {\n  state = {\n    password: \"\",\n    redirect: false,\n    matches: false,\n    matchId: false\n  };\n\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition((position) => {\n      console.log('got position', position)\n      if (this.props.user.UID && position) {\n        this.setState({ position })\n        this.getMatches(this.props.user.UID, position);\n      }\n    });\n\n  }\n\n  componentWillUnmount() {\n    // cancel get matches\n    DBGetMatches && DBGetMatches();\n    DBGetMatches = null;\n  }\n\n  getMatches = (userId, pos) => {\n\n    const radius = 1\n\n    const query = geoDb.collection(\"matches\").near({\n      center: new firebase.firestore.GeoPoint(pos.coords.latitude, pos.coords.longitude),\n      radius\n    });\n\n\n    DBGetMatches = query.onSnapshot(snapshot => {\n      const matches = [];\n      snapshot.forEach(doc => {\n        const players = [];\n        geoDb\n          .collection(\"matches\")\n          .doc(doc.id)\n          .collection(\"players\")\n          .get()\n          .then(querySnap => {\n            querySnap.forEach(snap => {\n              // check if user has already joined a match\n              if (snap.data().id === userId) {\n                this.setState({ matchId: doc.id });\n              }\n              players.push(snap.data());\n            });\n          });\n        if (!doc.data().playing) {\n          matches.push({\n            matchId: doc.id,\n            admin: doc.data().admin,\n            players\n          });\n        }\n      });\n      console.log(\"matches within 1km \", matches)\n      this.setState({ matches });\n    });\n  };\n\n  createMatch = (userId, username) => {\n    geoDb\n      .collection(\"matches\")\n      .add({\n        admin: { id: userId, name: username },\n        password: this.state.password,\n        waiting: true,\n        playing: false,\n        initialising: false,\n        coordinates: new firebase.firestore.GeoPoint(this.state.position.coords.latitude, this.state.position.coords.longitude)\n      })\n      .then(docRef => {\n        geoDb\n          .collection(\"matches\")\n          .doc(docRef.id)\n          .collection(\"players\")\n          .doc(this.props.user.UID)\n          .set({\n            id: userId,\n            name: username,\n            sonar: false,\n            coordinates: new firebase.firestore.GeoPoint(this.state.position.coords.latitude, this.state.position.coords.longitude)\n          })\n          .then(() => this.setState({ matchId: docRef.id }))\n          .catch(e => console.log(`Error adding ${username} to match. ${e}`));\n      })\n      .catch(e =>\n        console.error(`Error setting ${username} as admin of match. ${e}`)\n      );\n  };\n\n  joinMatch = (matchId, userId, username) => {\n    geoDb\n      .collection(\"matches\")\n      .doc(matchId)\n      .collection(\"players\")\n      .doc(this.props.user.UID)\n      .set({\n        id: userId,\n        name: username,\n        sonar: false,\n        coordinates: new firebase.firestore.GeoPoint(0, 0)\n      })\n      .then(() => this.setState({ matchId }))\n      .catch(e => console.log(`Error joining match. ${e}`));\n  };\n\n  handleInput = e => this.setState({ [e.target.name]: e.target.value });\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.createMatch(this.props.user.UID, this.props.user.username);\n  };\n\n  render() {\n    const {\n      user: { UID, username }\n    } = this.props;\n    const { matches, matchId } = this.state;\n\n    if (matchId) {\n      return <Redirect to={`game/${matchId}`} />;\n    } else {\n      return (\n        <Box\n          direction=\"column\"\n          justify=\"center\"\n          align=\"center\"\n          pad=\"small\"\n          gap=\"medium\"\n        >\n          \n          {this.state.position && (\n            <>\n              <h1>Create a game</h1>\n              <Box\n                pad=\"medium\"\n                border={{ color: \"brand\", size: \"large\" }}\n                elevation=\"medium\"\n                round=\"large\"\n                width=\"medium\"\n                align=\"center\"\n              >\n                <Form\n                  style={{ margin: \"1.5em 1.5em 0 1.5em \" }}\n                  onSubmit={this.handleSubmit}\n                >\n                  <FormField\n                    type=\"password\"\n                    name=\"password\"\n                    label=\"password\"\n                    onChange={this.handleInput}\n                  />\n                  <Button type=\"submit\" primary label=\"Create game\" />\n                </Form>\n              </Box>\n              <Box width=\"medium\" align=\"center\">\n                {matches.length >= 1 ? <h1>Join a game</h1> : <p>No other games within 1km</p>}\n                {matches &&\n                  matches.map(game => {\n                    return (\n                      <Box\n                        key={game.matchId}\n                        pad=\"small\"\n                        border={{ color: \"primary\", size: \"large\" }}\n                        elevation=\"small\"\n                        round=\"large\"\n                        width=\"medium\"\n                        align=\"center\"\n                        direction=\"row-responsive\"\n                        style={{ marginTop: \"1.5em\" }}\n                      >\n                        <h3 style={{ margin: \"auto\" }}>\n                          {\"created by \" + game.admin.name} <br />\n                        </h3>\n                        <Button\n                          onClick={() =>\n                            this.joinMatch(game.matchId, UID, username)\n                          }\n                          primary\n                          label=\"Join\"\n                        />\n                      </Box>\n                    );\n                  })}\n              </Box>\n            </>\n          )}\n        </Box>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = ({ user }) => ({\n  user\n});\n\nexport default connect(mapStateToProps)(Lobby);\n","import React, { Component } from \"react\";\nimport { Button, Box, Heading } from \"grommet\";\nimport { Close } from \"grommet-icons\";\n\nexport default class Alert extends Component {\n  componentDidMount = () => {\n    if (this.props.timer) {\n      setTimeout(() => {\n        this.props.clear()\n      }, 3000)\n    }\n  }\n  render() {\n    const style = {\n      width: \"80vw\",\n      height: \"100%\"\n    };\n\n\n    return (\n      <Box direction=\"row\" justify=\"center\" style={style}>\n        {/* <Button primary> */}\n          <Heading level={3} size=\"medium\">\n            {this.props.message}\n          </Heading>\n          <Button\n            hoverIndicator=\"light-1\"\n            onClick={() => this.props.clear()}\n          >\n            <Box pad=\"small\" direction=\"row\" align=\"center\" gap=\"small\">\n              <Close />\n            </Box>\n          </Button>\n        {/* </Button> */}\n      </Box>\n    );\n  }\n}\n","import * as firebase from \"firebase/app\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Box, Button, DropButton } from \"grommet\";\nimport { Close, Help } from \"grommet-icons\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport {\n  playerRef,\n  matchRef,\n  playersRef,\n  sonardPlayersRef,\n  taggedPlayersRef,\n  finishedMatchRef\n} from \"../../firebase\";\nimport routes from \"../../routes\";\nimport { Redirect } from \"react-router-dom\";\nimport Alert from \"./Alert\";\nimport Rules from \"./Rules\";\n\nlet map = null;\nlet thisUser = null;\nlet boundary = null;\n\n// firebase listeners\nlet DBgetMatch = null;\nlet DBwatchAllPlayers = null;\nlet DBwatchTaggedPlayers = null;\nlet DBwatchPlayersJoin = null;\n\nlet DBJoinedPlayers = [];\n\n//timers\nlet initTimerId = null;\nlet gameTimerId = null;\n\nclass InGame extends Component {\n  state = {\n    boundary: null,\n    position: null,\n    zoom: 18,\n    admin: false,\n    initialising: false,\n    players: null,\n    userLocationFound: false,\n    sonarTimer: 0,\n    playing: false,\n    initialisingTimer: 60,\n    geolocationError: false,\n    waiting: false,\n    tagger: false,\n    imTagger: false,\n    allPlayersTagged: false,\n    finished: false,\n    gameTimer: false,\n    abilityUsage: 0,\n    abilityTimer: 0,\n    quirk: false,\n    abilityInUse: false,\n    snitchingOn: [],\n    remaining: []\n  };\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", () => {\n      setTimeout(() => {\n        console.log(\n          \"player hasnt been active for more then 10 seconds => removed from game\"\n        );\n        this.handlePlayerQuit();\n      }, 10000);\n    });\n    if (this.props) {\n      matchRef(this.props.matchId)\n        .get()\n        .then(doc => {\n          if (doc.exists) {\n            if (doc.data().admin.id === this.props.user.UID) {\n              console.log('player is set as admin')\n              this.setState({ admin: true })\n            }\n          }\n        })\n        .then(() => {\n          this.initMap();\n        })\n\n      this.getMatch(); // toggle play btn\n    }\n  }\n  startTimer = duration => {\n    var timer = duration,\n      minutes,\n      seconds;\n    gameTimerId = setInterval(() => {\n      minutes = parseInt(timer / 60, 10);\n      seconds = parseInt(timer % 60, 10);\n\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n      if (timer === 0) {\n        clearInterval(gameTimerId);\n        if (this.state.admin) {\n          this.getSurvivors();\n        }\n      }\n\n      let clock = minutes + \":\" + seconds;\n      this.setState({ gameTimer: clock });\n      if (--timer < 0) {\n      }\n    }, 1000);\n  };\n  startInitialiseTimer = () => {\n    let timer = 5;\n    initTimerId = setInterval(() => {\n      timer = timer - 1;\n      this.setState({\n        initialisingTimer: timer\n      });\n      if (timer === 0) {\n        this.setState({\n          initialisingTimer: 0\n        });\n        matchRef(this.props.matchId) // move to playing phase in firebase\n          .update({ initialising: false, playing: true })\n          .catch(e => console.log(`Error initialising game. ${e}`));\n      }\n    }, 1000);\n  };\n  initMap = () => {\n    map = L.map(\"map\", {\n      zoom: 22,\n      maxZoomLevel: 22,\n      maxNativeZoom: 22,\n      zoomControl: true\n    }).fitWorld();\n\n    L.tileLayer(process.env.REACT_APP_OPEN_STREET_MAP, {\n      detectRetina: true,\n      attribution:\n        '&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n\n\n\n    map.on(\"locationfound\", e => {\n      this.setState({ myPosition: e.latlng });\n      const pos = new firebase.firestore.GeoPoint(e.latlng.lat, e.latlng.lng);\n      if (thisUser === null && map !== null) {\n        thisUser = L.circle(e.latlng, {\n          // set player marker to black\n          color: \"black\",\n          fillColor: \"#f03\",\n          fillOpacity: 0.5,\n          radius: 5\n        })\n          .addTo(map)\n          .bindPopup(this.props.user.username)\n          .openPopup();\n        map.setView(e.latlng, 17);\n      } else if (thisUser) {\n        let newLatLng = new L.LatLng(e.latlng.lat, e.latlng.lng);\n        thisUser.setLatLng(newLatLng);\n      }\n\n      if (boundary === null && map !== null && this.state.admin) {\n        console.log(\"setting default boundary pos\")\n        // set default boundary\n        boundary = L.circle(\n          e.latlng,\n          {\n            color: \"blue\",\n            fillColor: \"#f03\",\n            fillOpacity: 0.3,\n            radius: 100\n          }\n        ).addTo(map)\n\n        this.setState({ boundary: e.latlng })\n\n        map.setView(e.latlng, 17);\n\n        this.adminSetBoundary()\n      }\n\n\n      // update users location in DB\n      // playerRefExists(this.props.matchId, this.props.user.UID) && console.log(\"player ref exists\")\n      playerRef(this.props.matchId, this.props.user.UID)\n        .update({\n          coordinates: pos\n        })\n        .catch(e => console.log(\"error watching user position\", e));\n    });\n\n    map.on(\"locationerror\", e => {\n      alert(`Please enable geolocation access to play game. \n      redirecting in 2 seconds`);\n      setTimeout(() => {\n        this.setState({\n          geolocationError: true\n        });\n      }, 2500);\n    });\n\n    map.locate({ maxZoom: 22, watch: true, enableHighAccuracy: true });\n  };\n  leaveGame = () => {\n\n  }\n  handlePlayerQuit = () => {\n    console.log(\"quitting\", this.state.remaining);\n\n    if (this.state.waiting) {\n      // if admin end the game\n      if (this.state.admin) {\n        this.quitGame()\n      } else {\n        // if they are normal player then remove them from game\n        playerRef(this.props.matchId, this.props.user.UID)\n          .delete()\n          .then(() => {\n            this.setState({ quit: true });\n            console.log(\"succesfully left game\");\n          })\n          .catch(e => console.log(`error removing player from match `));\n      }\n    } else {\n      if (!this.state.imTagger) { // if im a remaining player\n        if (this.state.remaining === 1) { // if im the last remaining player\n          // end game and set this player as winner\n          this.setWinner({ name: this.props.user.username, id: this.props.user.UID })\n        } else if (this.state.remaining > 1) { // if im not the last remaining player\n          playerRef(this.props.matchId, this.props.user.UID)\n            .delete()\n            .then(() => {\n              this.setState({ quit: true });\n              console.log(\"succesfully left game\");\n              matchRef(this.props.matchId)\n                .update({\n                  quitter: this.props.user.username,\n                  remaining: this.state.remaining - 1\n                })\n                .then(() => {\n                  console.log(\n                    `updated game that ${this.props.user.username} has quit`\n                  );\n                })\n                .catch(e =>\n                  console.log(\n                    `error updating game that ${this.props.user.username} has quit`\n                  )\n                );\n            })\n            .catch(e => console.log(`error removing player from match `));\n        }\n      } else if (this.state.imTagger) { // if im a tagger\n\n        playersRef(this.props.matchId)\n          .get()\n          .then(snap => {\n            const players = []\n            snap.forEach(doc => {\n              players.push(doc.data())\n            })\n            return players\n          })\n          .then((players) => {\n            // check if im the only tagger \n            const imLastTagger = players.find(p => p.tagger)\n\n            if (imLastTagger) { // if im the last tagger and there are remaining players\n              // end game and set draw\n              const winners = players.filter(p => p.id !== this.props.user.UID)\n              winners.length > 1 ? this.setDraw(winners) : this.setWinner(winners[0])\n\n            } else { // update that tagger has left, remaining players stay the same\n              playerRef(this.props.matchId, this.props.user.UID)\n                .delete()\n                .then(() => {\n                  this.setState({ quit: true });\n                  console.log(\"succesfully left game\");\n                  matchRef(this.props.matchId)\n                    .update({\n                      quitter: this.props.user.username,\n                    })\n                    .then(() => {\n                      console.log(\n                        `updated game that ${this.props.user.username} has quit`\n                      );\n                    })\n                    .catch(e =>\n                      console.log(\n                        `error updating game that ${this.props.user.username} has quit`\n                      )\n                    );\n                })\n                .catch(e => console.log(`error removing player from match `));\n            }\n          })\n          .catch(e => console.log(`error getting playersRef ${e}`))\n\n\n\n\n      }\n    }\n\n\n  };\n  putPlayersMarkersOnMap = players => {\n    const markers = [];\n    players.forEach(player => {\n      const pos = [\n        player.position.geopoint.latitude,\n        player.position.geopoint.longitude\n      ];\n      const marker = L.circle(pos, {\n        // set player marker to black\n        color: \"red\",\n        fillColor: \"green\",\n        fillOpacity: 0.5,\n        radius: 5\n      })\n        .addTo(map)\n        .bindPopup(`you've tagged ${player.name}`)\n        .openPopup();\n      markers.push(marker);\n    });\n    let timer = 3;\n    const intervalId = setInterval(() => {\n      timer = timer - 1;\n      if (timer === 0) {\n        markers.forEach(marker => {\n          map.removeLayer(marker);\n        });\n        clearInterval(intervalId);\n      }\n    }, 1000);\n  };\n  getMatch = () => {\n    DBgetMatch = matchRef(this.props.matchId).onSnapshot(doc => {\n      if (doc.exists) {\n        this.setState({ gotMatch: true })\n        // check if user is admin\n        if (doc.data().admin.id === this.props.user.UID) {\n          this.setState({ admin: doc.data().admin });\n        }\n\n        // check if game is in waiting phase\n        if (doc.data().waiting === true) {\n          this.setState({ waiting: true });\n          this.watchPlayersJoin();\n        } else if (doc.data().waiting === false) {\n          this.setState({ waiting: false });\n        }\n\n        // check if game is initialising\n        if (doc.data().initialising) {\n          this.setState({ initialising: true });\n          this.startInitialiseTimer();\n          this.removeJoinedPlayers();\n          doc.data().boundary && this.setBoundary(doc.data().boundary)\n\n        } else if (doc.data().initialising === false) {\n          this.setState({ initialising: false });\n        }\n\n        // check if game is in play\n        if (doc.data().playing) {\n          clearInterval(initTimerId);\n          this.setState({ playing: true });\n\n          this.watchForTaggedPlayers();\n          this.watchForPlayerSonars();\n\n          // stop watching for players joining\n          DBwatchPlayersJoin && DBwatchPlayersJoin();\n          DBwatchPlayersJoin = null;\n\n          //if user refreshes tab reset boundary\n          map && this.state.boundary === null && doc.data().boundary && this.setBoundary(doc.data().boundary)\n\n          // set remaining players\n          doc.data().remaining && console.log(\"remaining players\", doc.data().remaining)\n          doc.data().remaining && this.setState({ remaining: doc.data().remaining })\n\n        } else if (doc.data().playing === false) {\n          this.setState({ playing: false });\n        }\n\n        // check who le tagger is\n        if (doc.data().tagger) {\n          if (doc.data().tagger.id === this.props.user.UID) {\n            this.setState({\n              imTagger: true,\n              tagger: doc.data().tagger\n            });\n          } else {\n            this.setState({ tagger: doc.data().tagger });\n          }\n        }\n\n        // if game is finished\n        if (doc.data().finished) {\n          clearInterval(gameTimerId);\n          if (this.state.admin) {\n            this.deleteMatch();\n          }\n\n          //stop watching user postion\n          map && map.stopLocate()\n          this.setState({ finished: true });\n        }\n\n        // if game is finished\n        if (doc.data().quit) {\n          clearInterval(gameTimerId);\n          if (this.state.admin) {\n            this.deleteMatch();\n          }\n          this.setState({ quit: true });\n        }\n\n        if (doc.data().quitter) {\n          console.log(\"we got a quitter\", doc.data().quitter);\n          this.setState({\n            quitter: doc.data().quitter\n          });\n\n          if (doc.data().quitter === doc.data().tagger.name) {\n            if (this.state.taggerHasTaggedSomeone) {\n              console.log(\"setting draw..\");\n              this.setDraw();\n            }\n          }\n        }\n\n        console.log(\"match data\", doc.data());\n      }\n    });\n  };\n  adminSetBoundary = () => {\n    console.log(\"setting boundary\")\n    let boundaryMoving = false\n    boundary.on({\n      'mousedown': () => {\n        map.removeEventListener('mousedown')\n        console.log('mousedown')\n        boundaryMoving = !boundaryMoving\n\n        boundaryMoving ? map.on('mousemove', (e) => {\n          boundary.setLatLng(e.latlng);\n          this.setState({ boundary: e.latlng })\n        }) : (\n            map.removeEventListener('mousemove')\n          )\n      }\n    });\n  }\n  setBoundary = (pos) => {\n    this.setState({ boundary: pos })\n\n    console.log(\"setting boundary from db\", pos)\n    boundary && map.removeLayer(boundary)\n    boundary = L.circle(\n      pos,\n      {\n        color: \"blue\",\n        fillColor: \"#f03\",\n        fillOpacity: 0.3,\n        radius: 100\n      }\n    ).addTo(map)\n\n    map.setView(pos, 17);\n  }\n  watchPlayersJoin = () => {\n    DBwatchPlayersJoin = playersRef(this.props.matchId)\n      .onSnapshot(snap => {\n        if (this.state.admin) {\n          const size = snap.size; // will return the collection size\n          console.log(\"player joined, total = \", size);\n          if (size > 1) {\n            this.setState({\n              playersJoined: size,\n              showPlayBtn: true\n            });\n          }\n        }\n        snap.forEach(doc => {\n\n          // filter out this user\n          if (doc.data().id !== this.props.user.UID) {\n\n            const player = doc.data()\n\n            // check if they are on map\n            const alreadyOnMap = DBJoinedPlayers.find(p => p.id === player.id)\n            console.log(\"alreadyOnMap\", alreadyOnMap)\n\n\n            const pos = [player.coordinates._lat, player.coordinates._long]\n            console.log(\"player\", player)\n            console.log(pos)\n\n            // update position\n            if (alreadyOnMap) {\n              alreadyOnMap.marker.setLatLng(pos)\n            } else {\n              console.log(\"setting joined player marker\")\n              const marker = L.circle(pos, {\n                color: \"red\",\n                fillColor: \"green\",\n                fillOpacity: 0.5,\n                radius: 5\n              })\n                .addTo(map)\n                .bindPopup(`${player.name}`)\n                .openPopup()\n              DBJoinedPlayers.push({\n                id: player.id,\n                marker\n              })\n            }\n          }\n        })\n      });\n\n    if (this.state.playing) {\n      DBwatchPlayersJoin && DBwatchPlayersJoin();\n      DBwatchPlayersJoin = null;\n    }\n  };\n  removeJoinedPlayers = () => {\n    DBJoinedPlayers.forEach(p => map.removeLayer(p.marker))\n  }\n  deleteMatch = () => {\n    matchRef(this.props.matchId)\n      .delete()\n      .then(() => {\n        console.log(\"game successfully deleted!\");\n      })\n      .catch(e => {\n        console.error(\"Error removing match from db: \", e);\n      });\n  };\n  initGame = () => { // choose tagger and set boundary location\n\n    // set boundary in db\n    matchRef(this.props.matchId).get().then(doc => {\n      if (doc.exists) {\n        matchRef(this.props.matchId).update({\n          boundary: [this.state.boundary.lat, this.state.boundary.lng]\n        })\n          .then(() => console.log('set boundary position in db'))\n          .catch(e => console.log(`error setting boundary position in db ${e}`))\n      }\n    })\n\n    // choose tagger\n    let players = [];\n    playersRef(this.props.matchId)\n      .get()\n      .then(querySnap => {\n        querySnap.forEach(snap => {\n          players.push({ id: snap.data().id, name: snap.data().name });\n        });\n      })\n      .then(() => {\n        const tagger = players[Math.floor(Math.random() * players.length)];\n        const remaining = players.length - 1\n        matchRef(this.props.matchId)\n          .update({ initialising: true, waiting: false, tagger, remaining })\n          .catch(e => console.log(`Error choosing tagger. ${e}`));\n\n        playersRef(this.props.matchId)\n          .doc(tagger.id)\n          .update({ tagger: true })\n          .then(() => console.log(` set tagger. ${tagger.name}`))\n          .catch(e => console.log(`Error choosing tagger. ${e}`));\n      });\n  };\n  tagPlayer = () => {\n\n    const center = new firebase.firestore.GeoPoint(\n      this.state.myPosition.lat,\n      this.state.myPosition.lng\n    ); // this players pos\n\n    const radius = 0.025 // 2.5m\n\n    const query = playersRef(this.props.matchId).near({ center, radius });\n\n    query.get().then(value => {\n      const geoQuery = []\n      value.docs.forEach(doc => {\n        if (doc.exists) {\n          geoQuery.push(doc.data())\n        }\n      });\n      console.log(\"geoQuery \", geoQuery)\n      const aboutToTag = geoQuery.filter(p => !p.tagger)\n      console.log(\"not tagged query\", aboutToTag)\n\n      // reset notification\n      this.setState({ tagFail: false })\n      aboutToTag.length === 0 && this.setState({ tagFail: true })\n\n      // check if they are last remaining players => win\n      if (this.state.remaining === aboutToTag.length) {\n\n        //check for draw || single winner\n        aboutToTag.length > 1 ? this.setDraw(aboutToTag) : this.setWinner(aboutToTag[0])\n      } else {\n        this.setPlayersAsTagged(aboutToTag)\n\n        // set remaining players\n        const justTagged = this.state.remaining - aboutToTag.length\n        matchRef(this.props.matchId).update({ remaining: justTagged })\n          .then(console.log(`update: remaining players = ${justTagged}`))\n          .catch(e => console.log(`error updating remaining players in match doc ${e}`));\n      }\n    });\n  };\n  setPlayersAsTagged = players => {\n\n    this.setState({ iJustTagged: players })\n\n    // set players as tagged\n    players.forEach((player) => {\n      playerRef(this.props.matchId, player.id)\n        .update({\n          tagger: true,\n          sonar: false\n        })\n        .then(console.log(`updated ${player.name} doc to tagger: true`))\n        .catch(e => console.log(`error updating player to tagger ${e}`));\n\n      playerRef(this.props.matchId, player.id)\n        .get()\n        .then((doc) => {\n          let pos\n          if (doc.exists) {\n            pos = [doc.data().coordinates.latitude, doc.data().coordinates.longitude]\n          }\n          return pos\n        })\n        .then(pos => {\n          pos && taggedPlayersRef(this.props.matchId)\n            .doc(player.id)\n            .set({\n              name: player.name,\n              id: player.id,\n              coordinates: new firebase.firestore.GeoPoint(pos[0], pos[1])\n            })\n            .then(() =>\n              console.log(`added ${player.name} to tagged players doc`)\n            )\n            .catch(e => console.log(`error adding ${player.name} to tagged players doc ${e}`));\n        })\n        .catch(e => console.log(`error getting ${player.name}'s position ${e}`));\n    })\n  }\n  setDraw = (winners) => {\n    console.log(\"set draw\", winners)\n    finishedMatchRef(this.props.matchId)\n      .set({\n        draw: winners\n      })\n      .then(() => console.log(\"match drew, winners are: \", winners))\n      .then(() => this.endGame())\n      .catch(e => console.log(`error when setting match draw ${e}`));\n  }\n  setWinner = (winner) => {\n    finishedMatchRef(this.props.matchId)\n      .set({\n        winner\n      })\n      .then(() => console.log(`set winner ${winner.name}`))\n      .then(() => this.endGame())\n      .catch(error => {\n        console.log(\"Error setting winner\", error);\n      });\n  }\n  watchForTaggedPlayers = () => {\n    DBwatchTaggedPlayers = taggedPlayersRef(this.props.matchId).onSnapshot(\n      snapShot => {\n        snapShot.docChanges().forEach(change => {\n          if (change.type === \"added\") {\n            this.setState({ taggerHasTaggedSomeone: true });\n            const player = change.doc.data();\n            this.setTaggedPlayerMarker(player);\n\n            // check if im tagged\n            if (player.id === this.props.user.UID) {\n              this.setState({ imTagger: true, iGotTagged: true });\n            }\n          }\n          if (change.type === \"modified\") {\n          }\n          if (change.type === \"removed\") {\n            console.log(\"removed\", change.doc.data());\n          }\n        });\n      }\n    );\n  };\n  setTaggedPlayerMarker = player => {\n    console.log(player.name + \"was tagged\");\n    let pos = [player.coordinates.latitude, player.coordinates.longitude];\n    const marker = L.circle(pos, {\n      color: \"orange\",\n      fillColor: \"orange\",\n      fillOpacity: 0.5,\n      radius: 2.5\n    })\n      .addTo(map)\n      .bindPopup(`${player.name} was tagged`)\n      .openPopup();\n    setTimeout(() => {\n      if (!this.state.finished && marker) {\n        console.log(\"removing just tagged player marker\");\n        map.removeLayer(marker);\n        map.setView(this.state.boundary, 17);\n      }\n    }, 5000);\n  };\n\n  sendSonar = () => {\n    this.setState({ sentSonar: true })\n    playersRef(this.props.matchId)\n      .where(\"tagger\", \"==\", true)\n      .get()\n      .then(querySnapshot => {\n        console.log(\"got taggers\")\n        querySnapshot.forEach(doc => {\n          let pos = [\n            doc.data().coordinates.latitude,\n            doc.data().coordinates.longitude\n          ];\n          console.log(\"tagger pos\", pos)\n          const marker = L.circle(pos, {\n            color: \"green\",\n            fillColor: \"green\",\n            fillOpacity: 0.5,\n            radius: 2.5\n          })\n            .addTo(map)\n            .bindPopup(\"Tagger\")\n            .openPopup();\n          map.setView(this.state.boundary, 17);\n          setTimeout(() => {\n            if (!this.state.finished && marker) {\n              map.removeLayer(marker);\n            }\n          }, 5000);\n        });\n      })\n      .then(() => {\n        playerRef(this.props.matchId, this.props.user.UID)\n          .get()\n          .then(doc => {\n            const pos = [doc.data().coordinates.latitude, doc.data().coordinates.longitude]\n\n            console.log(`got ${this.props.user.username}'s position. ${pos}`)\n\n            return pos\n          })\n          .then(pos => {\n            // notify taggers i used sonar\n            pos && sonardPlayersRef(this.props.matchId)\n              .doc(this.props.user.UID)\n              .set({\n                name: this.props.user.username,\n                id: this.props.user.UID,\n                coordinates: new firebase.firestore.GeoPoint(pos[0], pos[1]) // set to current position\n              })\n              .then(() => {\n                console.log(\"added player to sonard players coll\");\n                // setTimeout(() => {\n                sonardPlayersRef(this.props.matchId)\n                  .doc(this.props.user.UID)\n                  .delete()\n                  .then(() => console.log(`removed player from sonard coll`))\n                  .catch(e =>\n                    console.log(`error deleting player from sonard coll ${e}`)\n                  );\n                // }, 5000);\n              })\n              .catch(e =>\n                console.log(`error adding player to sonard players coll ${e}`)\n              );\n          })\n          .catch(e =>\n            console.log(`error getting ${this.props.user.UID}'s position`)\n          );\n\n      });\n  };\n  watchForPlayerSonars = () => {\n    DBwatchTaggedPlayers = sonardPlayersRef(this.props.matchId).onSnapshot(\n      snapShot => {\n        snapShot.docChanges().forEach(change => {\n          if (change.type === \"added\") {\n            const player = change.doc.data();\n            this.checkForPlayersSonar(player);\n          }\n          if (change.type === \"modified\") {\n          }\n          if (change.type === \"removed\") {\n          }\n        });\n      }\n    );\n  };\n  checkForPlayersSonar = player => {\n    if (this.state.imTagger) {\n      console.log(player.name + \"used sonar\");\n      let pos = [player.coordinates.latitude, player.coordinates.longitude];\n      const marker = L.circle(pos, {\n        color: \"green\",\n        fillColor: \"green\",\n        fillOpacity: 0.5,\n        radius: 2.5\n      })\n        .addTo(map)\n        .bindPopup(`player used sonar`)\n        .openPopup();\n      console.log(\"set just sonard player marker\");\n      setTimeout(() => {\n        if (!this.state.finished && marker) {\n          console.log(\"removing just sonard player marker\");\n          map.removeLayer(marker);\n          this.state.boundary && map.setView(this.state.boundary, 19);\n        }\n      }, 5000);\n    }\n  };\n  endGame = () => {\n    matchRef(this.props.matchId)\n      .get()\n      .then(doc => {\n        console.log(\"ending game\");\n        if (doc.exists) {\n          matchRef(this.props.matchId)\n            .update({\n              initialising: false,\n              waiting: false,\n              playing: false,\n              finished: true\n            })\n            .then(() => console.log(\"game finished\"))\n            .catch(error => {\n              console.log(\"Error ending game\", error);\n            });\n        }\n      });\n  };\n  quitGame = () => {\n    matchRef(this.props.matchId)\n      .update({\n        quit: true\n      })\n      .then(() => console.log(\"admin quit game\"))\n      .catch(error => {\n        console.log(\"Error quiting game\", error);\n      });\n  };\n  componentWillUnmount() {\n    // unsubscribe firestore listeners & reset global vars\n    DBwatchAllPlayers && DBwatchAllPlayers();\n    DBwatchTaggedPlayers && DBwatchTaggedPlayers();\n    DBgetMatch && DBgetMatch();\n    DBwatchPlayersJoin && DBwatchPlayersJoin();\n\n    boundary && map.removeLayer(boundary)\n    map && map.stopLocate()\n\n    map = null;\n    boundary = null;\n    thisUser = null;\n    DBgetMatch = null;\n    DBwatchAllPlayers = null;\n    DBwatchTaggedPlayers = null;\n    DBwatchPlayersJoin = null;\n\n    initTimerId = null;\n    gameTimerId = null;\n\n    window.removeEventListener(\"beforeunload\", this.handlePlayerQuit);\n  }\n  render() {\n    const {\n      gameTimer,\n      finished,\n      tagger,\n      imTagger,\n      waiting,\n      initialising,\n      admin,\n      geolocationError,\n      playing,\n      initialisingTimer,\n      remaining,\n      quit,\n      showPlayBtn,\n      quitter,\n      showQuitOverlay,\n      iGotTagged,\n      iJustTagged,\n      tagFail,\n      sentSonar\n    } = this.state;\n    if (geolocationError) {\n      return <Redirect to={routes.PROFILE} />;\n    } else if (finished) {\n      return <Redirect to={`${this.props.matchId}/finished`} />;\n    } else if (quit) {\n      return <Redirect to={routes.HOME} />;\n    } else {\n      return (\n        <Box align=\"center\">\n          {showQuitOverlay && (\n            <div>\n              <div\n                style={{\n                  position: \"fixed\",\n                  top: 0,\n                  left: 0,\n                  width: \"100vw\",\n                  height: \"100vh\",\n                  zIndex: 3,\n                  backgroundColor: \"grey\",\n                  opacity: 0.7\n                }}\n              ></div>\n              <Box\n                pad=\"medium\"\n                background=\"light-2\"\n                style={{\n                  height: \"25vh\",\n                  width: \"60vw\",\n                  position: \"fixed\",\n                  left: \"50%\",\n                  top: \"50%\",\n                  transform: \"translate(-50%, -50%)\",\n                  zIndex: 3\n                }}\n              >\n                <p style={{ textAlign: \"center\" }}>\n                  Are you sure you want to quit?\n                </p>\n                <Box\n                  style={{ position: \"relative\", zIndex: 4 }}\n                  direction=\"row\"\n                  align=\"center\"\n                  justify=\"between\"\n                >\n                  <Button\n                    hoverIndicator\n                    primary\n                    label=\"Back\"\n                    onClick={() => this.setState({ showQuitOverlay: false })}\n                  />\n                  <Button\n                    hoverIndicator\n                    secondary\n                    label=\"Quit\"\n                    onClick={this.handlePlayerQuit}\n                  />\n                </Box>\n              </Box>\n            </div>\n          )}\n          <Box\n            style={{ position: \"fixed\", top: \"0.5em\", right: \"0.5em\", zIndex: 2 }}\n          >\n            <Box elevation=\"small\" round=\"full\" overflow=\"hidden\" background=\"light-2\">\n              <Button\n                icon={<Close />}\n                hoverIndicator\n                onClick={() => this.setState({ showQuitOverlay: true })}\n              />\n            </Box>\n            <Box style={{ marginTop: '0.5em' }} elevation=\"small\" round=\"full\" overflow=\"hidden\" background=\"light-2\">\n              <DropButton\n                icon={<Help />}\n                dropAlign={{ top: 'bottom', left: 'left' }}\n                dropContent={\n                  <Rules />\n                }\n              />\n            </Box>\n          </Box>\n          <Box\n            id=\"map\"\n            style={{ height: \"60vh\", width: \"100%\", zIndex: 1 }}\n          ></Box>\n          {playing && (\n            <div>\n              <p style={{ color: \"red\" }}>{gameTimer}</p>\n            </div>\n          )}\n          {// if waiting and admin\n            admin && waiting && (\n              <div>\n                {\n                  <p>tap boundary to move and place it</p>\n                }\n                {showPlayBtn ? (\n                  <p>Press play when all players have joined game.</p>\n                ) : (\n                    <p style={{ marginRight: \"2em\" }}>no players joined yet..</p>\n                  )}\n\n                <Box align=\"center\" direction=\"row\">\n                  {showPlayBtn && (\n                    <Button onClick={this.initGame} label=\"Play!\" primary />\n                  )}\n                  <Button onClick={this.quitGame} label=\"Quit\" secondary />\n                </Box>\n              </div>\n            )}\n          {// if waiting and not admin\n            !admin && waiting && <p>waiting for more players to join...</p>}\n\n          {initialising && !imTagger && (\n            <div>\n              <h2>{`${tagger.name} is in!`}</h2>\n              <p>{`Game starts in ${initialisingTimer} seconds. GO HIDE!!!`}</p>\n            </div>\n          )}\n          {initialising && imTagger && (\n            <p>\n              Your in! <br />\n              {`you may hunt players in ${initialisingTimer} seconds`}\n            </p>\n          )}\n          {!imTagger && playing && (\n            sentSonar ? (\n              <Alert message={`Sonar sent. Tagger's can see your position! `} timer={true} clear={() => this.setState({ sentSonar: null })} />\n            ) : (\n                <Button\n                  primary\n                  style={{ padding: \"0.8em\" }}\n                  onClick={this.sendSonar}\n                  label=\"send sonar\"\n                />\n              )\n          )}\n          {imTagger && playing && (\n            <>\n              <Button\n                primary\n                style={{ padding: \"0.8em\" }}\n                onClick={this.tagPlayer}\n                label=\"tag\"\n              />\n\n            </>\n          )}\n\n          {\n            // notifications below here\n          }\n\n          {quitter && (\n            <Alert message={`${quitter} has quit!`} timer={true} clear={() => this.setState({ quitter: null })} />\n          )}\n          {\n            iGotTagged && <Alert message=\"you got tagged! you are now a tagger\" clear={() => this.setState({ iGotTagged: null })} />\n          }\n          {\n            iJustTagged && (\n              iJustTagged.map(player => {\n                return <Alert key={player.id} message={`you tagged ${player.name}`} clear={() => this.setState({ iJustTagged: null })} />\n              })\n            )\n          }\n          {\n            tagFail && (\n              <Alert message={`no players within 2m. tagging unsuccessfull`} timer={true} clear={() => this.setState({ tagFail: null })} />\n            )\n          }\n\n          {\n            imTagger && playing && (\n              remaining === 1 ? (\n                <p> {remaining} player left! </p>\n              ) : (\n                  <p> {remaining} player's left </p>\n                )\n            )\n          }\n        </Box>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = ({ user }) => ({\n  user\n});\n\nexport default connect(mapStateToProps)(InGame);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Box, Button, Heading } from \"grommet\";\nimport { db } from \"../../firebase\";\nimport routes from \"../../routes\";\n\nclass FinishedGame extends Component {\n  state = {};\n\n  componentDidMount = () => {\n    this.getWinners();\n  };\n\n  getWinners = () => {\n    // connect to firebase\n    db.collection(\"finishedMatches\")\n      .doc(this.props.matchId)\n      .get()\n      .then(doc => {\n        if (doc.exists) {\n          if (doc.data().winner) {\n            this.setState({\n              winner: doc.data().winner\n            });\n\n            // increment winners wins\n            if (doc.data().winner.id === this.props.user.UID) {\n              this.updateWinTotal();\n            }\n          } else if (doc.data().draw) {\n            console.log(doc.data().draw);\n            this.setState({\n              draw: doc.data().draw\n            });\n\n            const Iwon = doc\n              .data()\n              .draw.find(p => p.id === this.props.user.UID);\n\n            if (Iwon) this.updateWinTotal();\n          }\n        }\n      });\n  };\n\n  updateWinTotal = () => {\n    let playerWins = 0;\n    db.collection(\"users\")\n      .doc(this.props.user.UID)\n      .get()\n      .then(doc => {\n        if (doc.data().wins) {\n          playerWins = doc.data().wins;\n        }\n      })\n      .then(() => {\n        db.collection(\"users\")\n          .doc(this.props.user.UID)\n          .update({\n            wins: playerWins + 1\n          })\n          .then(() => {\n            console.log(\"updated user stats\");\n          })\n          .catch(function(error) {\n            // The document probably doesn't exist.\n            console.error(\"Error updating user stats \", error);\n          });\n      });\n  };\n  render() {\n    const { winner, draw } = this.state;\n    return (\n      <Box align=\"center\">\n        {\n          <Box justify=\"center\" align=\"center\" pad=\"medium\">\n            {winner && <Heading>{winner.name} won!</Heading>}\n            {draw && (\n              <Box\n                direcrtion=\"column\"\n                justify=\"center\"\n                align=\"center\"\n                pad=\"medium\"\n              >\n                <Heading>Its a draw!</Heading>\n                {draw.map(p => {\n                  return <Heading key={p.name}>{p.name} won</Heading>;\n                })}\n              </Box>\n            )}\n          </Box>\n        }\n        <Box direction=\"row\">\n          <Button as={Link} to={routes.LOBBY} primary label=\"play again\" />\n          <Button as={Link} to={routes.PROFILE} secondary label=\"go home\" />\n        </Box>\n      </Box>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user }) => ({\n  user\n});\n\nexport default connect(mapStateToProps)(FinishedGame);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { Box, Text, Button, Heading } from \"grommet\";\nimport { Attraction, Car } from \"grommet-icons\";\nimport { geoDb } from \"../../firebase\";\n\nclass ClassSelect extends Component {\n  state = {\n    redirect: false,\n    classes: [\n      {\n        name: \"Joker\",\n        description:\n          \"Can give away a fake position for up to 90 seconds. can use it 2 times per game\"\n      },\n      {\n        name: \"Snitch\",\n        description:\n          \"Can give other players position away to tagger 3 times per game\"\n      },\n      {\n        name: \"Defuser\",\n        description: \"Can cancel 5 sonars per game\"\n      }\n    ]\n  };\n\n  componentDidMount = () => {\n    // check if player has already chosen class\n    geoDb\n      .collection(\"matches\")\n      .doc(this.props.matchId)\n      .collection(\"players\")\n      .doc(this.props.user.UID)\n      .get()\n      .then(doc => {\n        if (doc.data().playerQuirk) {\n          this.setState({\n            redirect: true\n          });\n        }\n      });\n  };\n\n  selectClass = selectedClass => {\n    let player = {};\n    if (selectedClass === \"Defuser\") {\n      player = {\n        playerQuirk: selectedClass,\n        abilityUse: 5\n      };\n    } else if (selectedClass === \"Joker\") {\n      player = {\n        playerQuirk: selectedClass,\n        abilityUse: 2\n      };\n    } else if (selectedClass === \"Snitch\") {\n      player = {\n        playerQuirk: selectedClass,\n        abilityUse: 3\n      };\n    }\n    geoDb\n      .collection(\"matches\")\n      .doc(this.props.matchId)\n      .collection(\"players\")\n      .doc(this.props.user.UID)\n      .update(player)\n      .then(() => {\n        this.setState({ redirect: true });\n        console.log(\"updated user class\");\n      })\n      .catch(error => `error updating user class, ${error}`);\n  };\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to={`/game/${this.props.matchId}`} />;\n    } else {\n      return (\n        <Box\n          direction=\"column\"\n          justify=\"center\"\n          align=\"center\"\n          pad=\"xlarge\"\n          gap=\"medium\"\n        >\n          <Heading>Choose your class</Heading>\n          <Box pad=\"large\" align=\"center\" background=\"dark-2\" round gap=\"small\">\n            <Car size=\"large\" color=\"light-2\" />\n            <Text>Tagger</Text>\n            <Text size=\"small\">Tag anyone within 5m of you. no mercy</Text>\n          </Box>\n          {this.state.classes.map(type => {\n            return (\n              <Box\n                pad=\"large\"\n                align=\"center\"\n                background={{ color: \"light-2\", opacity: \"strong\" }}\n                round\n                gap=\"small\"\n                key={type.name}\n              >\n                <Attraction size=\"large\" />\n                <Text>{type.name}</Text>\n                <Text size=\"small\">{type.description}</Text>\n                <Button\n                  onClick={() => this.selectClass(type.name)}\n                  primary\n                  label=\"Select\"\n                />\n              </Box>\n            );\n          })}\n        </Box>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = ({ user }) => ({\n  user\n});\n\nexport default connect(mapStateToProps)(ClassSelect);\n","import React from \"react\";\nimport { Grommet } from \"grommet\";\nimport grommet from \"grommet/themes\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport SignUp from \"./Auth/SignUp\";\nimport Login from \"./Auth/Login\";\nimport Profile from \"./Profile\";\nimport Lobby from \"./game/Lobby\";\nimport InGame from \"./game/InGame\";\nimport routes from \"../routes\";\nimport FinishedGame from \"./game/FinishedGame\";\nimport ClassSelect from \"./game/ClassSelect\";\n\nconst App: React.FC = () => {\n  return (\n    <Grommet theme={grommet}>\n      <Router>\n        <Switch>\n          {\n            <Route\n              path={routes.SIGN_UP}\n              exact\n              component={SignUp}\n            /> /* TODO: make redirect from '/' => '/signUp' with auth*/\n          }\n          <Route path={\"/\"} exact component={SignUp} />\n          <Route path={routes.LOGIN} exact component={Login} />\n          <Route path={routes.PROFILE} exact component={Profile} />\n          <Route path={routes.LOBBY} exact component={Lobby} />\n          <Route\n            path={routes.GAME}\n            exact\n            render={routeProps => (\n              <InGame matchId={routeProps.match.params.matchId} />\n            )}\n          />\n          <Route\n            path={routes.CLASS_SELECT}\n            exact\n            render={routeProps => (\n              <ClassSelect matchId={routeProps.match.params.matchId} />\n            )}\n          />\n          <Route\n            path={routes.FINISHED_GAME}\n            exact\n            render={routeProps => (\n              <FinishedGame matchId={routeProps.match.params.matchId} />\n            )}\n          />\n        </Switch>\n      </Router>\n    </Grommet>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { store, persistor } from './redux-persist'\nimport { PersistGate } from \"redux-persist/lib/integration/react\"\n\nimport './index.css';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker'\n\nrequire('dotenv').config()\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  render(\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n  )\n})\n\nserviceWorker.unregister()\n"],"sourceRoot":""}